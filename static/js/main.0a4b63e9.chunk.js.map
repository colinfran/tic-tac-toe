{"version":3,"sources":["components/square/index.js","components/board/index.js","components/game/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","updateGameArray","props","gameArray","idx","playerTurn","className","onClick","this","React","Component","Board","val","index","newArray","playerMoves","winningLine","winLine","Game","getOrdinal","n","s","v","checkForWinner","arr","turn","state","rowCount","winClass","i","setState","winType","columnCount","newArr","records","recordedMoves","push","record","outCome","recordedMovesIndex","length","restartGame","stepBack","prevPlayerTurn","prevRecordedMoves","prevRecordedMovesIndex","pop","renderBottomText","Button","id","variant","color","style","pointerEvents","App","renderStart","gameStarted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a4b63e9.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n  This component represents each of the squares in the tic-tac-toe board.\n**/\nexport default class Square extends React.Component {\n\n  updateGameArray = () => {\n    /* verify square hasn't been clicked; if it hasn't, run parent function. */\n    if (this.props.gameArray[this.props.idx] === 'x' || this.props.gameArray[this.props.idx] === 'o') return;\n    this.props.updateGameArray(this.props.playerTurn,this.props.idx);\n  }\n\n\n  render(){\n    return (\n      <div className=\"square\" onClick={this.updateGameArray}>\n        {this.props.gameArray[this.props.idx] === 1 ? \" \" : this.props.gameArray[this.props.idx]}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Square from '../square';\n\n/**\n  This component represents the board of the tic-tac-toe game.\n**/\nexport default class Board extends React.Component {\n\n  updateGameArray = (val, index) => {\n    /* set value at index in array to 'x' or 'o' to represent square clicked */\n    var newArray = [...this.props.gameArray];\n    newArray[index]=val;\n    this.props.updateGameArray(newArray);\n  }\n\n\n  playerMoves = () => {\n    /* 3x3 squares to represent 3x3 in tic-tac-toe board */\n    return(\n      <div className=\"playerMovesContainer\">\n        <div className=\"playerMovesContainerRow\">\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={0}/>\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={1}/>\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={2}/>\n        </div>\n        <div className=\"playerMovesContainerRow\">\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={3}/>\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={4}/>\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={5}/>\n        </div>\n        <div className=\"playerMovesContainerRow\">\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={6}/>\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={7}/>\n          <Square updateGameArray={this.updateGameArray} gameArray={this.props.gameArray} playerTurn={this.props.playerTurn} idx={8}/>\n        </div>\n      </div>\n    );\n  }\n\n  winningLine = () => {\n    /* 3x3 squares to represent 3x3 in tic-tac-toe board */\n    return(\n      <div className={this.props.winLine}>\n      </div>\n    );\n  }\n\n  render(){\n    /* Tic-Tac-Toe Board Lines */\n    return (\n      <div className=\"boardContainer\">\n        <div>\n          <div className=\"boardRow1\">\n            <div className=\"column\">\n            </div>\n            <div className=\"column\">\n            </div>\n          </div>\n          <div className=\"boardRow2\">\n            <div className=\"column\">\n            </div>\n            <div className=\"column\">\n            </div>\n          </div>\n          <div className=\"boardRow3\">\n            <div className=\"column\">\n            </div>\n            <div className=\"column\">\n            </div>\n          </div>\n        </div>\n        {this.playerMoves()}\n        {this.winningLine()}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Board from '../board';\nimport Button from '@material-ui/core/Button';\n\n/**\n  This component represents the board of the tic-tac-toe game.\n  All of the game's logic comes from this component as state values.\n  some of these state values are passed down to its child components\n**/\nexport default class Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      gameArray: [1, 1, 1, 1, 1, 1, 1, 1, 1], /** 3x3 game array **/\n      recordedMoves: [], /** array of objects of each move of the game **/\n      playerTurn: 'x', /**  player up to click a square **/\n      recordedMovesIndex: 0, /**  maxIndex value in recordedMoves array **/\n      outCome: \"\", /**  outcome of game, is empty string until win or draw **/\n      winType: \"\", /**  if win, was it diagnal, vertical, horizontal? **/\n      winLine: \"hidden\"/**  string to hold css className for win line **/\n    };\n  }\n\n  getOrdinal = (n) => {\n  /* function to return integer as string with ordinal ending */\n    var s=[\"th\",\"st\",\"nd\",\"rd\"], v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n  }\n\n  checkForWinner = (arr) => {\n    /* Checks for horizontal, vertical, and diagnal wins */\n    var turn = this.state.playerTurn;\n    var rowCount = 0;\n    var winClass = \"hidden\";\n    for (var i = 0; i <= 6; i += 3) {\n      if (arr[i] === turn && arr[i + 1] === turn && arr[i + 2] === turn){\n        winClass = \"winLine horizontalWin winRow\" + (rowCount + 1);\n        this.setState({winType:`horizontal ${this.getOrdinal(rowCount + 1)} row`, winLine: winClass});\n        return true;\n      }\n      rowCount++;\n    }\n    var columnCount = 0;\n    for (i = 0; i <= 2; i++) {\n      if (arr[i] === turn && arr[i + 3] === turn && arr[i + 6] === turn){\n        winClass = \"winLine verticalWin winColumn\" + (columnCount+1);\n        this.setState({winType:`vertical ${this.getOrdinal(columnCount + 1)} column`, winLine: winClass});\n        return true;\n      }\n      columnCount++;\n    }\n    if (arr[0] === turn && arr[4] === turn && arr[8] === turn){\n      winClass = \"winLine diagonalWin winTopLeftToBottomRight\";\n      this.setState({winType:\"diagonal top left to bottom right\", winLine: winClass});\n      return true;\n    }\n    if (arr[2] === turn && arr[4] === turn && arr[6] === turn){\n      winClass = \"winLine diagonalWin winBottomLeftToTopRight\";\n      this.setState({winType:\"diagonal bottom left to top right\", winLine: winClass});\n      return true;\n    }\n    return false;\n  }\n\n  updateGameArray = (newArr) => {\n    /* Update states on valid square click, also checking for winner or draw */\n    var records = [...this.state.recordedMoves];\n    records.push({record: newArr});\n    var outCome = \"\";\n    if (this.checkForWinner(newArr))\n      outCome = this.state.playerTurn;\n    else if (this.state.recordedMovesIndex >= this.state.gameArray.length-1)\n      outCome=\"draw\";\n    this.setState({\n      gameArray: newArr,\n      recordedMoves: records,\n      recordedMovesIndex: this.state.recordedMovesIndex + 1,\n      outCome: outCome,\n      playerTurn: this.state.playerTurn === 'x' ? 'o': 'x'\n    });\n  }\n\n  restartGame = () => {\n    /* restart all states on Restart Button Click */\n    this.setState({\n      gameArray: [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      recordedMoves: [],\n      playerTurn: 'x',\n      recordedMovesIndex: 0,\n      outCome: \"\",\n      winType: \"\",\n      winLine: \"hidden\"\n    })\n  }\n\n  stepBack = () => {\n    /* step back a step - update state values to previous recorded move */\n    var prevPlayerTurn = this.state.playerTurn === 'x' ? 'o' : 'x';\n    var prevRecordedMoves = [...this.state.recordedMoves];\n    var prevRecordedMovesIndex = this.state.recordedMovesIndex -1;\n    if (prevRecordedMovesIndex > 0){\n      prevRecordedMoves.pop();\n      this.setState({\n        gameArray: prevRecordedMoves[prevRecordedMoves.length-1].record,\n        recordedMoves: prevRecordedMoves,\n        playerTurn: prevPlayerTurn,\n        recordedMovesIndex: prevRecordedMovesIndex,\n        outCome: \"\",\n        winType: \"\",\n        winLine: \"hidden\"\n      })\n    }\n    else{\n      prevRecordedMovesIndex = 0;\n      prevPlayerTurn = 'x';\n      this.setState({\n        gameArray: [1, 1, 1, 1, 1, 1, 1, 1, 1],\n        recordedMoves: [],\n        playerTurn: 'x',\n        recordedMovesIndex: 0,\n        outCome: \"\",\n        winType: \"\",\n        winLine: \"hidden\"\n      })\n    }\n  }\n\n  renderBottomText = () => {\n    /* Display the player turn while game is running and there is no outcome\n      If there is an update to outcome, display info for that outcome. */\n    if (this.state.outCome === \"\"){\n      return(\n        <div>\n          <div className=\"bottomText\">{`Player ${this.state.playerTurn}'s turn.`}</div>\n        </div>\n      );\n    }\n    else{\n      if (this.state.outCome === 'draw'){\n        return(\n          <div>\n            <div className=\"bottomText gameTie\">\n              <div>Draw!</div>\n              <div>The game ended in a tie.</div>\n            </div>\n          </div>\n        );\n      }\n      else{\n        return(\n          <div>\n            <div className=\"bottomText gameWin\">\n              <div>Winner Winner Chicken Dinner!</div>\n              <div>{`Player ${this.state.outCome} is the winner!`}</div>\n              <div className=\"styledBottomText\">{`${this.state.winType} win`}</div>\n            </div>\n          </div>\n        );\n      }\n    }\n  }\n\n  render(){\n    return (\n      <div>\n        <div className=\"gameBtnContainer\">\n          <Button id=\"restartGame\" className=\"gameBtnContainerBtn\" variant=\"contained\" color=\"primary\" onClick={()=> this.restartGame()}>\n            Restart Game\n          </Button>\n          <Button id=\"stepBack\" className=\"gameBtnContainerBtn\" variant=\"contained\" color=\"primary\" onClick={()=> this.stepBack()}>\n            Step back\n          </Button>\n        </div>\n        <div style={this.state.outCome !== \"\" ? {pointerEvents: 'none'} : {}} >\n          <Board gameArray={this.state.gameArray} updateGameArray={this.updateGameArray} playerTurn={this.state.playerTurn} winLine={this.state.winLine}/>\n          {this.renderBottomText()}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Game from './components/game';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\n\n/**\n  This is the first compoent that gets called in the index.js file.\n  This component is the root of all the other components.\n**/\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      gameStarted: false /** boolean value to represent showing game on page **/\n    };\n  }\n\n  renderStart = () => {\n    /* displays the game once the user clicks the 'Start' Button */\n    if (this.state.gameStarted){\n      return (\n        <div>\n          <Game/>\n        </div>\n      );\n    }\n    else{\n      return (\n        <div className=\"gameOnLoad\">\n          Click start to start a game of tic-tac-toe\n          <Button id=\"startButton\" variant=\"contained\" color=\"primary\"  onClick={()=>this.setState({gameStarted: true})}>\n            Start\n          </Button>\n        </div>\n      );\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {this.renderStart()}\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}